name: Release Builder
on:
  push:
    tags:
      - 'v*'


env:
  BUILD_TYPE: Release
  packageGlob: Black_Chocobo-*.*

jobs:
  main_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
           name: "Linux-amd64"
           , os: ubuntu-20.04
           , QT_VERSION: 6.3.0, QT_INST_DIR: /opt, QTDIR: /opt/Qt/6.3.0/gcc_64, QT_MODULES: qt5compat
           , ff7tkPrefix: /opt/ff7tk
           , ff7tkPackage: ff7tk-continuous-Linux_X86_64.tar.gz
           , install_ff7tk: "sudo tar -xf ff7tk-continuous-Linux_x86_64.tar.gz --one-top-level=/opt/ff7tk"
           , extraCMakeConfig: "-DCMAKE_INSTALL_PREFIX=/usr -DQT_DEFAULT_MAJOR_VERSION=6"
           , installBC: "make DESTDIR=appdir install"
           , linuxDeployQtPath: "export PATH=$PATH:/opt/Qt/6.3.0/gcc_64/libexec"
          }
        - {
            name: "MacOS-amd64"
            , os: macos-10.15
            , QT_VERSION: 6.3.0, QT_INST_DIR: /Users/runner, QTDIR: /Users/runner/Qt/6.3.0/clang_64, QT_MODULES: qt5compat
            , ff7tkPrefix: /Users/runner/ff7tk
            , installBC: "make install"
            , ff7tkPackage: ff7tk-continuous-macos_X86_64.zip
            , install_ff7tk: "sudo unzip ff7tk-continuous-macos_x86_64.zip -d /Users/runner/ff7tk"
            , extraCMakeConfig: "-DCMAKE_INSTALL_PREFIX=. -DQT_DEFAULT_MAJOR_VERSION=6"
          }
        - {
            name: "Windows-x64", WIN_ARCH: "x64"
            , os: windows-2019
            , QT_VERSION: 6.3.0, QT_INST_DIR: "C:/", QTDIR: "C:/Qt/6.3.0/msvc2019_64", QT_ARCH: win64_msvc2019_64, QT_MODULES: qt5compat
            , ff7tkPrefix: "C:/ff7tk"
            , ff7tkPackage: ff7tk-continuous-win64.7z
            , install_ff7tk: "7z x ff7tk-continuous-win64.7z -oC:/ff7tk"
            , extraCMakeConfig: "-G Ninja -DQT_DEFAULT_MAJOR_VERSION=6"
          }
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - run: git fetch --tags --force

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{matrix.config.QT_INST_DIR}}/Qt
        key: ${{ runner.os }}${{ matrix.config.WIN_ARCH }}-qt-${{ matrix.config.QT_VERSION }}

    - name: Env Script (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{matrix.config.WIN_ARCH}}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
       aqtversion: ==2.0.0
       py7zrversion: ==0.16.2
       dir: ${{matrix.config.QT_INST_DIR}}
       arch: ${{ matrix.config.QT_ARCH }}
       version: ${{ matrix.config.QT_VERSION }}
       modules: ${{ matrix.config.QT_MODULES }}
       cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Get ff7tk redist
      run: curl -LJO https://github.com/sithlord48/ff7tk/releases/download/continuous/${{matrix.config.ff7tkPackage}}

    - name: Cache ff7tk
      id: cache-ff7tk
      uses: actions/cache@v2
      with:
        path: ${{ matrix.config.ff7tkPrefix }}
        key: ${{ runner.os }}${{ matrix.config.WIN_ARCH }}-Qt${{matrix.config.QT_VERSION}}-ff7tk-${{ hashFiles( 'ff7tk*') }}

    - name: Install ff7tk
      if: (steps.cache-ff7tk.outputs.cache-hit != 'true')
      run: ${{matrix.config.install_ff7tk}}

    - name: Build Black_Chocobo
      id: main_build
      shell: bash
      run: |
        cmake -S. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCPACK_PACKAGE_VERSION=${{github.ref}} -Dff7tk_DIR=${{matrix.config.ff7tkPrefix}}/lib/cmake/ff7tk ${{matrix.config.extraCMakeConfig}}
        cmake --build . --config ${{env.BUILD_TYPE}} --target package
        ${{matrix.config.installBC}}

    - name: Build AppImage (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -qc "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget -qc "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        chmod a+x linuxdeploy*.AppImage
        export VERSION=${{github.ref}}
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{ matrix.config.ff7tkPrefix }}/lib
        mkdir -p ./appdir/usr/share/ff7tk/lang
        mkdir -p ./appdir/usr/plugins/iconengines
        cp /opt/Qt/${{ matrix.config.QT_VERSION }}/gcc_64/plugins/iconengines/libqsvgicon.so ./appdir/usr/plugins/iconengines/libqsvgicon.so
        cp ${{matrix.config.ff7tkPrefix}}/share/ff7tk/lang/*.qm ./appdir/usr/share/ff7tk/lang
        ${{matrix.config.linuxDeployQtPath}}
        ./linuxdeploy-x86_64.AppImage --appdir=appdir  --output appimage \
          -e src/blackchocobo \
          -d deploy/org.sithlord48.blackchocobo.desktop \
          -i deploy/blackchocobo.png \
          --plugin=qt

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{github.workspace}}/${{env.packageGlob}}

  release_assets:
    name: Release
    needs: main_Build
    runs-on: ubuntu-latest
    steps:
    - name: Download Files
      uses: actions/download-artifact@v2

    - name: Move Files
      run: mv artifact/* ${{github.workspace}}

    - name: Deploy Package
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
       repo_token: "${{ secrets.DEPLOYTOKEN }}"
       prerelease: false
       files: ${{env.packageGlob}}
