/****************************************************************************/
//    copyright 2010-2012 Chris Rizzitello <sithlord48@gmail.com>           //
//                                                                          //
//    This file is part of Black Chocobo.                                   //
//                                                                          //
//    Black Chocobo is free software: you can redistribute it and/or modify //
//    it under the terms of the GNU General Public License as published by  //
//    the Free Software Foundation, either version 3 of the License, or     //
//    (at your option) any later version.                                   //
//                                                                          //
//    Black Chocobo is distributed in the hope that it will be useful,      //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of        //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          //
//    GNU General Public License for more details.                          //
/****************************************************************************/
#include "globals.h"
#include "QMessageBox"
int ff7__checksum( void* qw )
{
   int i = 0, t, d;
   long r = 0xFFFF, len = 4336;
   long pbit = 0x8000;
   char* b=(char*)qw;

   while( len-- ) {
      t = b[i++];
      r ^= t << 8;
      for(d=0;d<8;d++) {
         if( r & pbit )
            r = ( r << 1 ) ^ 0x1021;
         else
            r <<= 1;
      }
      r &= ( 1 << 16 ) - 1;
   }
   return (r^0xFFFF)&0xFFFF;
}

void fix_pc_bytemask(FF7 *ff7,int s,bool skip_slot_mask)
{
    quint8 mask=0;
    quint8 newheader[0x09] = {0x71,0x73,0x27,0x06,0x00,0x00,0x00,0x00,0x00};
    //calc 0x04 of the header (selected slot) no idea why they choose this way to do it but slot15 = 0xC2 , slot 14= 0xb2  and so on till slot2 = 0x01 and slot 01 0x00
    if(!skip_slot_mask)
    {
        switch(s)
        {
        case 0: newheader[4]=0x00; break;
        case 1: newheader[4]=0x01; break;
        default:newheader[4]= (16 * (s-2))+2; break;
        };
    }
    else{newheader[4] = ff7->file_headerp[4];}
    //calc 0x05 of the header (slots 1-8 empty?)
    for(int i=0;i<8;i++)
    {
        if(ff7->SG_Region_String[i].contains("00867") || ff7->SG_Region_String[i].contains("00869") ||
           ff7->SG_Region_String[i].contains("00900") || ff7->SG_Region_String[i].contains("94163") ||
           ff7->SG_Region_String[i].contains("00700") || ff7->SG_Region_String[i].contains("01057") ||
           ff7->SG_Region_String[i].contains("00868"))
        {
        mask |= (1<<i);
        }
    }
    newheader[5]=mask;
    mask=0;// reset for the next byte
    //calc 0x06 of the header (slot 9-15 empty?)
    for(int i=8;i<15;i++)
    {
        if(ff7->SG_Region_String[i].contains("00867") || ff7->SG_Region_String[i].contains("00869") ||
           ff7->SG_Region_String[i].contains("00900") || ff7->SG_Region_String[i].contains("94163") ||
           ff7->SG_Region_String[i].contains("00700") || ff7->SG_Region_String[i].contains("01057") ||
           ff7->SG_Region_String[i].contains("00868"))
        {
        mask |= (1<<(i-8));
        }
    }
    newheader[6]=mask;
    memcpy(ff7->file_headerp,newheader,9);
}

void fix_psx_header(FF7 *ff7,int i)
{   //Time Has to be fixed in the header part of description string.
    if((ff7->slot[i].time/3600)>99){ff7->hf[i].sl_header[27]=0x58;ff7->hf[i].sl_header[29]=0x58;}
    else
    {
        ff7->hf[i].sl_header[27] = ((ff7->slot[i].time/3600)/10)+0x4F;
        ff7->hf[i].sl_header[29] = ((ff7->slot[i].time/3600)%10)+0x4F;
    }
    ff7->hf[i].sl_header[33] = ((ff7->slot[i].time/60%60)/10)+0x4F;
    ff7->hf[i].sl_header[35] = ((ff7->slot[i].time/60%60)%10)+0x4F;
}

void fix_vmc_header(FF7 *ff7)
{//Set The Index Section Up.
    QByteArray mc_header_2;
    int index=2;

    if(ff7->SG_TYPE =="PSP"){for(int i=0; i<0x80; i++){mc_header_2.append(ff7->file_header_psp[i]);} index=0x82;}
    if(ff7->SG_TYPE =="VGS"){for(int i=0; i<0x40; i++){mc_header_2.append(ff7->file_header_vgs[i]);} index=0x42;}
    if(ff7->SG_TYPE =="DEX"){for(int i=0; i<0xF40; i++){mc_header_2.append(ff7->file_header_vgs[i]);} index=0xF42;}
    quint8 xor_byte = 0x00;
    mc_header_2.append("MC");
    if(ff7->SG_TYPE =="MC"){for(int k=0; k<125;k++){mc_header_2.append(ff7->file_header_mc[k+index]);}}
    if(ff7->SG_TYPE =="PSP"){for(int k=0; k<125;k++){mc_header_2.append(ff7->file_header_psp[k+index]);}}
    if(ff7->SG_TYPE =="VGS"){for(int k=0; k<125;k++){mc_header_2.append(ff7->file_header_vgs[k+index]);}}
    if(ff7->SG_TYPE =="DEX"){for(int k=0; k<125;k++){mc_header_2.append(ff7->file_header_dex[k+index]);}}
    xor_byte= 0x00;
    if(ff7->SG_TYPE =="MC"){for(int x=0;x<127;x++){xor_byte^=mc_header_2[x];}}
    if(ff7->SG_TYPE =="PSP"){for(int x=128;x<256;x++){xor_byte^=mc_header_2[x];}}
    if(ff7->SG_TYPE =="VGS"){for(int x=64;x<192;x++){xor_byte^=mc_header_2[x];}}
    if(ff7->SG_TYPE =="DEX"){for(int x=0xF40;x<0x1000;x++){xor_byte^=mc_header_2[x];}}
    //write xor byte..
    mc_header_2.append(xor_byte);
    // thats a normal header
    for(int i=0;i<15;i++)
    {
        //calc xor byte..
        index= (128 +(128*i));
        if(ff7->SG_TYPE =="PSP"){index+=0x80;}
        if(ff7->SG_TYPE =="VGS"){index+=0x40;}
        if(ff7->SG_TYPE =="DEX"){index+=0xF40;}
        if(ff7->SG_Region_String[i].contains("00867") ||ff7->SG_Region_String[i].contains("00869") ||
           ff7->SG_Region_String[i].contains("00900") ||ff7->SG_Region_String[i].contains("94163") ||
           ff7->SG_Region_String[i].contains("00700") ||ff7->SG_Region_String[i].contains("01057") ||
           ff7->SG_Region_String[i].contains("00868"))
        {
           QByteArray temp;
           temp.resize(10);
           temp[0]=0x51;temp[1]=0x00;temp[2]=0x00;temp[3]=0x00;temp[4]=0x00;
           temp[5]=0x20;temp[6]=0x00;temp[7]=0x00;temp[8]=0xFF;temp[9]=0xFF;
           mc_header_2.append(temp);
           mc_header_2.append(ff7->SG_Region_String[i]);
           temp.resize(98);
           for(int f=0;f<98;f++){temp[f]=0x00;}
           mc_header_2.append(temp);
           xor_byte = 0x00;
           for(int x=0;x<127;x++){xor_byte^=mc_header_2[x+index];}
           mc_header_2.append(xor_byte);

           if(ff7->SG_Region_String[i].endsWith("S01"))
           {for(int P=0;P<512;P++)
               {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S01[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }

           if(ff7->SG_Region_String[i].endsWith("S02"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S02[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S03"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S03[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S04"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S04[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S05"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S05[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S06"))
           {for(int P=0;P<512;P++)
               {
                   if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S06[P];}
                   else{ff7->hf[i].sl_header[P]= 0x00;}
               }
           }
           if(ff7->SG_Region_String[i].endsWith("S07"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S07[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S08"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S08[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S09"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S09[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S10"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S10[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S11"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S11[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S12"))
           {for(int P=0;P<512;P++)
               {
                   if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S12[P];}
                   else{ff7->hf[i].sl_header[P]= 0x00;}
               }
           }
           if(ff7->SG_Region_String[i].endsWith("S13"))
           {for(int P=0;P<512;P++)
                {
                    if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S13[P];}
                    else{ff7->hf[i].sl_header[P]= 0x00;}
                }
           }
           if(ff7->SG_Region_String[i].endsWith("S14"))
           {for(int P=0;P<512;P++)
               {
                   if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S14[P];}
                   else{ff7->hf[i].sl_header[P]= 0x00;}
               }
           }
           if(ff7->SG_Region_String[i].endsWith("S15"))
           {for(int P=0;P<512;P++)
               {
                   if(P<256){ff7->hf[i].sl_header[P]= PSX_SAVE_GAME_FILE_HEADER_S15[P];}
                   else{ff7->hf[i].sl_header[P]= 0x00;}
               }
           }
           fix_psx_header(ff7,i);//here ff7 is already a pointer to ff7 in mainwindow.
        } // write string if found
        else
        {//Write What Ever is in the Header (Non ff7 data)
            if(ff7->SG_TYPE =="MC"){for(int j=0;j<128;j++){mc_header_2.append(ff7->file_header_mc[index+j]);}}
            if(ff7->SG_TYPE =="PSP"){for(int j=0;j<128;j++){mc_header_2.append(ff7->file_header_psp[index+j]);}}
            if(ff7->SG_TYPE =="VGS"){for(int j=0;j<128;j++){mc_header_2.append(ff7->file_header_vgs[index+j]);}}
            if(ff7->SG_TYPE =="DEX"){for(int j=0;j<128;j++){mc_header_2.append(ff7->file_header_dex[index+j]);}}
        }
    }

    if(ff7->SG_TYPE =="MC")
    {
        index=2048;
        for(int i=0;i<6143;i++){mc_header_2.append(ff7->file_header_mc[index+i]);}// fill the remainder
        memcpy(ff7->file_header_mc,mc_header_2,0x2000);
    }
    if(ff7->SG_TYPE =="PSP")
    {
        index=2048+0x80;
        for(int i=0;i<6143;i++){mc_header_2.append(ff7->file_header_psp[index+i]);}// fill the remainder
        memcpy(ff7->file_header_psp,mc_header_2,0x2080);
        //PUT PSP CHECKSUMING HERE ..
    }
    if(ff7->SG_TYPE =="VGS")
    {
        index=2048+0x40;
        for(int i=0;i<6143;i++){mc_header_2.append(ff7->file_header_vgs[index+i]);}// fill the remainder
        memcpy(ff7->file_header_psp,mc_header_2,0x2040);
    }
    if(ff7->SG_TYPE =="DEX")
    {
        index=2048+0xF40;
        for(int i=0;i<6143;i++){mc_header_2.append(ff7->file_header_dex[index+i]);}// fill the remainder
        memcpy(ff7->file_header_psp,mc_header_2,0x2F40);
    }
}

QString avatar_style(int id)
{
    QString style;
    switch(id)
    {
      case 0:
        style="image: url(:/icon/cloud_icon)";
        break;
      case 1:
        style="image: url(:/icon/barret_icon)";
        break;
      case 2:
        style="image: url(:/icon/tifa_icon)";
        break;
      case 3:
        style="image: url(:/icon/aeris_icon)";
        break;
      case 4:
        style="image: url(:/icon/red_icon)";
        break;
      case 5:
        style="image: url(:/icon/yuffie_icon)";
        break;
      case 6:
        style="image: url(:/icon/cait_icon)";
        break;
      case 7:
        style="image: url(:/icon/vincent_icon)";
        break;
      case 8:
        style="image: url(:/icon/cid_icon)";
        break;
      case 9:
        style="image: url(:/icon/y_cloud_icon)";
        break;
      case 10:
        style="image: url(:/icon/sep_icon)";
        break;
      }
    return style;
}

/*LEVEL CHART */
quint32 charlvls[11][99]=
{
    {0,6,33,94,202,372,616,949,1384,1934,2614,3588,4610,5809,7200,8797,10614,12665,14965,17528,20368,24161,27694,31555,35759,40321,45255,50576,56299,62438,69008,77066,84643,92701,101255,110320,119910,130040,140725,151980,163820,176259,189312,202994,217320,232305,247963,264309,281358,299125,317625,336872,356881,377667,399245,421630,444836,468878,493771,519530,546170,581467,610297,640064,670784,702471,735141,768808,803488,839195,875945,913752,952632,992599,1033669,1075856,1119176,1163643,1209273,1256080,1304080,1389359,1441133,1494178,1548509,1604141,1661090,1719371,1778999,1839990,1902360,1966123,2031295,2097892,2165929,2235421,2306384,2378833,2452783},
    {0,7,35,98,210,385,637,980,1428,1995,2695,3689,4740,5973,7403,9045,10913,13022,15387,18022,20942,24827,28457,32424,36744,41431,46501,51968,57848,64155,70905,79149,86931,95207,103992,113302,123151,133555,144529,156088,168248,183403,196985,211222,226129,241721,258014,275023,292763,311250,330500,350527,371347,392976,415429,438721,462868,487885,513787,540590,568310,596961,626559,657120,688659,721191,754732,789297,824901,861560,899290,938105,978021,1019054,1061219,1104531,1149006,1194659,1241505,1289560,1338840,1389359,1441133,1494178,1548509,1604141,1661090,1719371,1778999,1839990,1902360,1966123,2031295,2097892,2165929,2235421,2306384,2378833,2452783},
    {0,6,33,94,202,372,616,949,1384,1934,2614,3588,4610,5809,7200,8797,10614,12665,14965,17528,20368,24161,27694,31555,35759,40321,45255,50576,56299,62438,69008,77066,84643,92701,101255,110320,119910,130040,140725,151980,163820,178647,191877,205744,220264,235451,251321,267888,285168,303175,321925,341432,361712,382779,404649,427336,450856,475223,500453,526560,553560,581467,610297,640064,670784,702471,735141,768808,803488,839195,875945,913752,952632,992599,1033669,1075856,1119176,1163643,1209273,1256080,1304080,1371319,1422421,1474777,1528402,1583312,1639521,1697045,1755899,1816098,1877658,1940593,2004919,2070651,2137804,2206394,2276435,2347943,2420933},
    {0,6,32,92,199,366,607,935,1363,1905,2575,3542,4550,5733,7105,8680,10472,12495,14763,17290,20090,23831,27315,31123,35270,39770,44637,49885,55529,61584,68064,77066,84643,92701,101255,110320,119910,130040,140725,151980,163820,176259,189312,202994,217320,232305,247963,264309,281358,299125,317625,341432,361712,382779,404649,427336,450856,475223,500453,526560,553560,589211,618425,648589,679718,711828,744933,779049,814191,850374,887614,925925,965323,1005823,1047440,1090190,1134087,1179147,1225385,1272816,1321456,1407407,1459854,1513588,1568624,1624979,1682667,1741705,1802108,1863891,1927071,1991662,2057681,2125143,2194063,2264458,2336342,2409732,2484643},
    {0,6,33,94,202,372,616,949,1384,1934,2614,3588,4610,5809,7200,8797,10614,12665,14965,17528,20368,24493,28074,31988,36250,40875,45877,51271,57072,63295,69955,78112,85792,93959,102629,111816,121536,131803,142633,154040,166040,178647,191877,205744,220264,235451,251321,267888,285168,303175,321925,341432,361712,382779,404649,427336,450856,475223,500453,526560,553560,589211,618425,648589,679718,711828,744933,779049,814191,850374,887614,925925,965323,1005823,1047440,1090190,1134087,1179147,1225385,1272816,1321456,1371319,1422421,1474777,1528402,1583312,1639521,1697045,1755899,1816098,1877658,1940593,2004919,2070651,2137804,2206394,2276435,2347943,2420933},
    {0,6,33,95,205,377,625,963,1404,1962,2652,3639,4675,5891,7302,8922,10765,12845,15177,17776,20656,24827,28457,32424,36744,41431,46501,51968,57848,64155,70905,78112,85792,93959,102629,111816,121536,131803,142633,154040,166040,181023,194429,208481,223194,238584,254665,271453,288963,307210,326210,345977,366527,387875,410036,433026,456859,481551,507117,533572,560932,596961,626559,657120,688659,721191,754732,789297,824901,861560,899290,938105,978021,1019054,1061219,1104531,1149006,1194659,1241505,1289560,1338840,1389359,1441133,1494178,1548509,1604141,1661090,1719371,1778999,1839990,1902360,1966123,2031295,2097892,2165929,2235421,2306384,2378833,2452783},
    {0,6,33,95,205,377,625,963,1404,1962,2652,3639,4675,5891,7302,8922,10765,12845,15177,17776,20656,24827,28457,32424,36744,41431,46501,51968,57848,64155,70905,78112,85792,93959,102629,111816,121536,131803,142633,154040,166040,178647,191877,205744,220264,235451,251321,267888,285168,303175,321925,345977,366527,387875,410036,433026,456859,481551,507117,533572,560932,589211,618425,648589,679718,711828,744933,779049,814191,850374,887614,925925,965323,1005823,1047440,1090190,1134087,1179147,1225385,1272816,1321456,1371319,1422421,1474777,1528402,1583312,1639521,1697045,1755899,1816098,1877658,1940593,2004919,2070651,2137804,2206394,2276435,2347943,2420933},
    {0,7,35,98,210,385,637,980,1428,1995,2695,3639,4675,5891,7302,8922,10765,12845,15177,17776,20656,24827,28457,32424,36744,41431,46501,51968,57848,64155,70905,79149,86931,95207,103992,113302,123151,133555,144529,156088,168248,181023,194429,208481,223194,238584,254665,271453,288963,307210,326210,345977,366527,387875,410036,433026,456859,481551,507117,533572,560932,589211,618425,648589,679718,711828,744933,779049,814191,850374,887614,925925,965323,1005823,1047440,1090190,1134087,1179147,1225385,1272816,1321456,1371319,1422421,1474777,1528402,1583312,1639521,1697045,1755899,1816098,1877658,1940593,2004919,2070651,2137804,2206394,2276435,2347943,2420933},
    {0,6,33,95,205,377,625,963,1404,1962,2652,3639,4675,5891,7302,8922,10765,12845,15177,17776,20656,24827,28457,32424,36744,41431,46501,51968,57848,64155,70905,78112,85792,93959,102629,111816,121536,131803,142633,154040,166040,181023,194429,208481,223194,238584,254665,271453,288963,307210,326210,345977,366527,387875,410036,433026,456859,481551,507117,533572,560932,596961,626559,657120,688659,721191,754732,789297,824901,861560,899290,938105,978021,1019054,1061219,1104531,1149006,1194659,1241505,1289560,1338840,1389359,1441133,1494178,1548509,1604141,1661090,1719371,1778999,1839990,1902360,1966123,2031295,2097892,2165929,2235421,2306384,2378833,2452783},
    {0,13,65,182,390,715,1183,1820,2652,3705,5005,7084,9100,11466,14210,17360,20944,24990,29526,34580,40180,46354,53130,60536,68600,77350,86814,97020,107996,119770,132370,114576,125840,137819,150535,164010,178266,193325,209209,225940,243540,214389,230265,246906,264330,282555,301599,321480,342216,363825,386325,318682,337610,357273,377685,398860,420812,443555,467103,491470,516670,372124,390575,409626,429286,449566,470474,492021,514216,537068,560588,584784,609667,635246,661530,688530,716254,744713,773916,803872,834592,487154,505308,523908,542959,562466,582435,602871,623779,645165,667035,689393,712245,735597,759454,783821,808704,834108,860038},
    {0,6,33,94,202,372,616,949,1384,1934,2614,3588,4610,5809,7200,8797,10614,12665,14965,17528,20368,24161,27694,31555,35759,40321,45255,50576,56299,62438,69008,77066,84643,92701,101255,110320,119910,130040,140725,151980,163820,176259,189312,202994,217320,232305,247963,264309,281358,299125,317625,336872,356881,377667,399245,421630,444836,468878,493771,519530,546170,581467,610297,640064,670784,702471,735141,768808,803488,839195,875945,913752,952632,992599,1033669,1075856,1119176,1163643,1209273,1256080,1304080,1389359,1441133,1494178,1548509,1604141,1661090,1719371,1778999,1839990,1902360,1966123,2031295,2097892,2165929,2235421,2306384,2378833,2452783}
};
quint32 chartnls[11][99]=
{
    {0,6,27,61,108,170,244,333,435,550,680,974,1022,1199,1391,1597,1817,2051,2300,2563,2840,3793,3533,3861,4204,4562,4934,5321,5723,6139,6570,8058,7577,8058,8554,9065,9590,10130,10685,11255,11840,12439,13053,13682,14326,14985,15658,16346,17049,17767,18500,19247,20009,20786,21578,22385,23206,24042,24893,25759,26640,35297,28830,29767,30720,31687,32670,33667,34680,35707,36750,37807,38880,39967,41070,42187,43320,44467,45630,46807,48000,85279,51774,53045,54331,55632,56949,58281,59628,60991,62370,63763,65172,66597,68037,69492,70963,72449,73950},
    {0,7,28,63,112,175,252,343,448,567,700,994,1051,1233,1430,1642,1868,2109,2365,2635,2920,3885,3630,3967,4320,4687,5070,5467,5880,6307,6750,8244,7782,8276,8785,9310,9849,10404,10974,11559,12160,15155,13582,14237,14907,15592,16293,17009,17740,18487,19250,20027,20820,21629,22453,23292,24147,25017,25902,26803,27720,28651,29598,30561,31539,32532,33541,34565,35604,36659,37730,38815,39916,41033,42165,43312,44475,45653,46846,48055,49280,50519,51774,53045,54331,55632,56949,58281,59628,60991,62370,63763,65172,66597,68037,69492,70963,72449,73950},
    {0,6,27,61,108,170,244,333,435,550,680,974,1022,1199,1391,1597,1817,2051,2300,2563,2840,3793,3533,3861,4204,4562,4934,5321,5723,6139,6570,8058,7577,8058,8554,9065,9590,10130,10685,11255,11840,14827,13230,13867,14520,15187,15870,16567,17280,18007,18750,19507,20280,21067,21870,22687,23520,24367,25230,26107,27000,27907,28830,29767,30720,31687,32670,33667,34680,35707,36750,37807,38880,39967,41070,42187,43320,44467,45630,46807,48000,67239,51102,52356,53625,54910,56209,57524,58854,60199,61560,62935,64326,65732,67153,68590,70041,71508,72990},
    {0,6,26,60,107,167,241,328,428,542,670,967,1008,1183,1372,1575,1792,2023,2268,2527,2800,3741,3484,3808,4147,4500,4867,5248,5644,6055,6480,9002,7577,8058,8554,9065,9590,10130,10685,11255,11840,12439,13053,13682,14326,14985,15658,16346,17049,17767,18500,23807,20280,21067,21870,22687,23520,24367,25230,26107,27000,35651,29214,30164,31129,32110,33105,34116,35142,36183,37240,38311,39398,40500,41617,42750,43897,45060,46238,47431,48640,85951,52447,53734,55036,56355,57688,59038,60403,61783,63180,64591,66019,67462,68920,70395,71884,73390,74911},
    {0,6,27,61,108,170,244,333,435,550,680,974,1022,1199,1391,1597,1817,2051,2300,2563,2840,4125,3581,3914,4262,4625,5002,5394,5801,6223,6660,8157,7680,8167,8670,9187,9720,10267,10830,11407,12000,12607,13230,13867,14520,15187,15870,16567,17280,18007,18750,19507,20280,21067,21870,22687,23520,24367,25230,26107,27000,35651,29214,30164,31129,32110,33105,34116,35142,36183,37240,38311,39398,40500,41617,42750,43897,45060,46238,47431,48640,49863,51102,52356,53625,54910,56209,57524,58854,60199,61560,62935,64326,65732,67153,68590,70041,71508,72990},
    {0,6,27,62,110,172,248,338,441,558,690,987,1036,1216,1411,1620,1843,2080,2332,2599,2880,4171,3630,3967,4320,4687,5070,5467,5880,6307,6750,7207,7680,8167,8670,9187,9720,10267,10830,11407,12000,14983,13406,14052,14713,15390,16081,16788,17510,18247,19000,19767,20550,21348,22161,22990,23833,24692,25566,26455,27360,36029,29598,30561,31539,32532,33541,34565,35604,36659,37730,38815,39916,41033,42165,43312,44475,45653,46846,48055,49280,50519,51774,53045,54331,55632,56949,58281,59628,60991,62370,63763,65172,66597,68037,69492,70963,72449,73950},
    {0,6,27,62,110,172,248,338,441,558,690,987,1036,1216,1411,1620,1843,2080,2332,2599,2880,4171,3630,3967,4320,4687,5070,5467,5880,6307,6750,7207,7680,8167,8670,9187,9720,10267,10830,11407,12000,12607,13230,13867,14520,15187,15870,16567,17280,18007,18750,24052,20550,21348,22161,22990,23833,24692,25566,26455,27360,28279,29214,30164,31129,32110,33105,34116,35142,36183,37240,38311,39398,40500,41617,42750,43897,45060,46238,47431,48640,49863,51102,52356,53625,54910,56209,57524,58854,60199,61560,62935,64326,65732,67153,68590,70041,71508,72990},
    {0,7,28,63,112,175,252,343,448,567,700,944,1036,1216,1411,1620,1843,2080,2332,2599,2880,4171,3630,3967,4320,4687,5070,5467,5880,6307,6750,8244,7782,8276,8785,9310,9849,10404,10974,11559,12160,12775,13406,14052,14713,15390,16081,16788,17510,18247,19000,19767,20550,21348,22161,22990,23833,24692,25566,26455,27360,28279,29214,30164,31129,32110,33105,34116,35142,36183,37240,38311,39398,40500,41617,42750,43897,45060,46238,47431,48640,49863,51102,52356,53625,54910,56209,57524,58854,60199,61560,62935,64326,65732,67153,68590,70041,71508,72990},
    {0,6,27,62,110,172,248,338,441,558,690,987,1036,1216,1411,1620,1843,2080,2332,2599,2880,4171,3630,3967,4320,4687,5070,5467,5880,6307,6750,7207,7680,8167,8670,9187,9720,10267,10830,11407,12000,14983,13406,14052,14713,15390,16081,16788,17510,18247,19000,19767,20550,21348,22161,22990,23833,24692,25566,26455,27360,36029,29598,30561,31539,32532,33541,34565,35604,36659,37730,38815,39916,41033,42165,43312,44475,45653,46846,48055,49280,50519,51774,53045,54331,55632,56949,58281,59628,60991,62370,63763,65172,66597,68037,69492,70963,72449,73950},
    {0,13,52,117,208,325,468,637,832,1053,1300,2079,2016,2366,2744,3150,3584,4046,4536,5054,5600,6174,6776,7406,8064,8750,9464,10206,10976,11774,12600,-17794,11264,11979,12716,13475,14256,15059,15884,16731,17600,-29151,15876,16641,17424,18225,19044,19881,20736,21609,22500,-67643,18928,19663,20412,21175,21952,22743,23548,24367,25200,-144546,18451,19051,19660,20280,20908,21547,22195,22852,23520,24196,24883,25579,26284,27000,27724,28459,29203,29956,30720,-347438,18154,18600,19051,19507,19969,20436,20908,21386,21870,22358,22852,23352,23857,24367,24883,25404,25930},
    {0,6,27,61,108,170,244,333,435,550,680,974,1022,1199,1391,1597,1817,2051,2300,2563,2840,3793,3533,3861,4204,4562,4934,5321,5723,6139,6570,8058,7577,8058,8554,9065,9590,10130,10685,11255,11840,12439,13053,13682,14326,14985,15658,16346,17049,17767,18500,19247,20009,20786,21578,22385,23206,24042,24893,25759,26640,35297,28830,29767,30720,31687,32670,33667,34680,35707,36750,37807,38880,39967,41070,42187,43320,44467,45630,46807,48000,85279,51774,53045,54331,55632,56949,58281,59628,60991,62370,63763,65172,66597,68037,69492,70963,72449,73950}
};

quint8 stat_grade[9][5]=
{
  {1,6,3,4,26},
  {5,2,18,14,29},
  {6,18,16,9,25},
  {23,20,0,1,28},
  {12,11,13,9,23},
  {16,19,11,10,24},
  {19,22,6,4,28},
  {21,22,6,4,28},
  {11,7,17,15,27}
};
int mp_base[9][8]=
{
    {12,0,-26,-58,-102,-102,-4,180},
    {10,0,-20,-60,-108,-96,0,170},
    {10,0,-28,-58,-98,-98,-26,136},
    {16,0,-30,-68,-116,-96,-6,188},
    {12,-6,-28,-60,-104,-126,-16,210},
    {10,-2,-20,-58,-110,-130,20,126},
    {12,-2,-20,-60,-104,-104,-20,178},
    {12,-6,-26,-44,-60,-86,38,74},
    {10,-12,-26,-38,-66,-116,69,140}
};
quint8 mp_gradent[9][8]=
{
    {64,78,90,101,112,112,96,73},
    {57,67,77,90,102,100,84,63},
    {60,70,84,94,104,104,92,72},
    {70,84,99,112,124,120,105,82},
    {58,75,86,97,108,112,94,66},
    {58,72,80,93,106,110,85,72},
    {60,75,83,97,108,108,94,70},
    {63,80,90,96,100,105,97,84},
    {54,75,83,87,94,104,89,69}
};
int hp_base[9][8]=
{
    {200,-40,-640,-1440,-2280,-3080,-2040,-200},
    {200,0,-760,-1840,-2840,-2840,-1160,600},
    {200,0,-520,-1520,-2520,-3000,-2160,-80},
    {160,0,-560,-1400,-2240,-2880,-2080,-400},
    {200,-40,-640,-1560,-2360,-2760,-1840,-80},
    {200,0,-560,-1320,-2160,-2960,-2560,-520},
    {200,-80,-640,-1640,-2760,-2600,-240,2000},
    {160,-80,-600,-1160,-2120,-2800,-2640,-400},
    {200,-40,-640,-1640,-2360,-2560,-1720,-0}
};
quint8 hp_gradent[9][8]=
{
    {19,42,72,100,121,137,120,98},
    {22,45,82,118,143,143,115,95},
    {19,38,64,96,121,131,117,92},
    {17,36,65,93,114,126,113,93},
    {21,45,75,105,126,134,119,97},
    {18,37,64,89,111,127,120,96},
    {24,51,80,111,141,138,99,72},
    {18,41,67,86,110,123,120,92},
    {23,44,73,107,125,129,115,93}
};
quint8 luck_base[9][8]=
{
    {15,16,16,17,17,17,18,19},
    {14,15,15,15,16,17,18,20},
    {14,15,15,16,17,17,17,20},
    {14,15,15,16,16,18,17,17},
    {14,15,15,16,16,18,17,17},
    {16,17,17,17,18,18,18,19},
    {14,15,15,16,17,17,17,20},
    {14,15,15,16,17,17,17,20},
    {14,15,15,15,16,17,18,20}
};
quint8 luck_gradent[9][8]=
{
    {20,10,10,8,8,8,7,6},
    {15,8,8,7,6,5,4,3},
    {20,10,10,9,9,10,10,6},
    {18,8,8,8,8,5,7,7},
    {18,8,8,8,8,5,7,7},
    {20,10,10,10,8,10,10,9},
    {20,10,10,9,9,10,10,6},
    {20,10,10,9,9,10,10,6},
    {15,8,8,7,6,5,4,3}
};
quint8 stat_base[30][8]=
{
    {12,9,9,21,44,50,57,73},
    {13,12,11,11,17,43,53,80},
    {12,10,11,21,32,42,56,73},
    {12,13,11,15,33,40,51,69},
    {10,9,8,8,30,33,40,61},
    {12,12,14,14,23,49,55,62},
    {10,8,5,17,17,30,50,61},
    {11,10,11,16,27,33,37,58},
    {12,9,10,11,29,34,49,58},
    {9,8,8,8,26,29,42,48},
    {9,9,7,8,11,26,48,53},
    {11,10,12,17,21,49,48},
    {9,9,6,8,29,51,57,62},
    {10,9,7,16,22,43,45,54},
    {8,9,11,13,16,18,40,60},
    {9,9,11,15,23,32,48,62},
    {10,9,10,16,22,28,49,55},
    {10,10,10,13,21,39,45,57},
    {10,10,9,11,21,35,51,57},
    {9,8,9,17,32,37,42,47},
    {10,9,8,11,29,39,47,53},
    {8,7,4,20,31,36,37,46},
    {9,9,10,15,21,28,35,53},
    {9,9,8,14,18,25,44,50},
    {8,9,12,13,22,29,38,55},
    {7,7,1,8,13,20,42,46},
    {6,7,6,6,10,19,36,37},
    {6,9,8,6,7,13,31,37},
    {5,6,7,7,9,18,38,38},
    {5,6,4,9,14,20,24,30}
};
quint8 stat_gradent[30][8]=
{
    {130,160,160,120,70,60,50,30},
    {120,130,133,135,120,72,55,21},
    {130,140,140,110,90,70,48,27},
    {130,140,140,110,90,79,53,32},
    {120,128,130,130,77,72,61,35},
    {120,125,117,118,93,52,44,35},
    {110,130,145,110,100,95,44,31},
    {120,135,130,110,85,70,60,35},
    {100,130,125,120,77,67,43,31},
    {110,120,122,123,80,75,55,44},
    {100,115,124,118,107,78,42,36},
    {110,120,115,102,91,37,40,40},
    {100,122,140,135,83,40,30,25},
    {110,122,130,98,83,45,44,33},
    {110,105,104,102,93,87,51,25},
    {115,127,121,108,86,68,41,24},
    {114,118,114,95,82,71,37,30},
    {112,115,111,103,83,48,39,25},
    {100,108,115,108,83,55,31,24},
    {100,111,112,87,53,45,39,34},
    {100,108,114,106,63,45,33,26},
    {100,110,127,77,50,41,40,31},
    {100,102,101,88,70,57,45,24},
    {100,100,107,85,77,60,30,24},
    {95,90,88,85,62,52,39,18},
    {80,85,115,92,78,64,27,21},
    {72,69,76,77,68,50,22,21},
    {70,53,63,70,69,58,28,20},
    {70,70,70,71,67,48,16,16},
    {65,63,76,61,49,36,28,20}
};
/*Stat Gain To Be Called once per stat when leveling up */
int stat_gain(int who,int stat, int stat_amount, int next_lvl)
{
  int gain=0;//return this
  int diff=0; //holds our dif
  int lvl_bracket=0; //track what bracket in the gradent/base were looking at.
  //0 str; 1 vit;2 mag; 3;spi ;4:dex; ; 5=luck; 6 hp;7mp
  int grade=0;// whats our grade in the stat only used for str/vit/mag/spi/dex
  int baseline_stat=0; // holds our baseline_stat calculation.
  //first find out the level bracket
  if(next_lvl>=2 && next_lvl<11){lvl_bracket=0;}
  else if(next_lvl>=12 && next_lvl<21){lvl_bracket=1;}
  else if(next_lvl>=22 && next_lvl<31){lvl_bracket=2;}
  else if(next_lvl>=32 && next_lvl<41){lvl_bracket=3;}
  else if(next_lvl>=42 && next_lvl<51){lvl_bracket=4;}
  else if(next_lvl>=52 && next_lvl<61){lvl_bracket=5;}
  else if(next_lvl>=62 && next_lvl<81){lvl_bracket=6;}
  else if(next_lvl>=82 && next_lvl<99){lvl_bracket=7;}
  //calculate the baseline to use.
  if(stat <5)
  {//calculating str,vit,mag,spi or dex
    grade =stat_grade[who][stat];
    baseline_stat= stat_base[grade][lvl_bracket]+((stat_gradent[grade][lvl_bracket]*next_lvl)/100);
  }
  else if(stat==5){baseline_stat = luck_base[who][lvl_bracket]+((luck_gradent[who][lvl_bracket])/100);}//
  else if(stat==6){baseline_stat = hp_base[who][lvl_bracket] + (next_lvl -1) * hp_gradent[who][lvl_bracket];}
  else if(stat==7){baseline_stat = mp_base[who][lvl_bracket] + ((next_lvl -1) * mp_gradent[who][lvl_bracket]/10);}
  //now calc the diff, so we can send back a gain based on type
  if(stat <6)
  {//str, vit,mag, spr,dex or luck all calculated the same
    diff = ((qrand() %8)+1) + (baseline_stat - stat_amount);
    if(diff<4){gain=0;}
    else if(diff<7){gain=1;}
    else if(diff<10){gain=2;}
    else {gain=3;}
  }
  else if(stat==6)
  {// Base HP Gain
      diff= ((qrand()%8)+1) + (100* baseline_stat/stat_amount)-100;
      if(diff ==0){gain = hp_gradent[who][lvl_bracket]*0.40;}
      else if (diff==1){gain = hp_gradent[who][lvl_bracket]*.50;}
      else if (diff==2){gain = hp_gradent[who][lvl_bracket]*.50;}
      else if (diff==3){gain = hp_gradent[who][lvl_bracket]*.60;}
      else if (diff==4){gain = hp_gradent[who][lvl_bracket]*.70;}
      else if (diff==5){gain = hp_gradent[who][lvl_bracket]*.80;}
      else if (diff==6){gain = hp_gradent[who][lvl_bracket]*.90;}
      else if (diff==7){gain = hp_gradent[who][lvl_bracket]*1.00;}
      else if (diff==8){gain = hp_gradent[who][lvl_bracket]*1.10;}
      else if (diff==9){gain = hp_gradent[who][lvl_bracket]*1.20;}
      else if (diff==10){gain = hp_gradent[who][lvl_bracket]*1.30;}
      else if (diff>=11){gain = hp_gradent[who][lvl_bracket]*1.50;}
  }
  else if(stat==7)
  {// Base MP Gain
      diff= ((qrand()%8)+1) + (100* baseline_stat/stat_amount)-100;
      if(diff ==0){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*0.20;}
      else if (diff==1){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*.30;}
      else if (diff==2){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*.30;}
      else if (diff==3){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*.50;}
      else if (diff==4){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*.70;}
      else if (diff==5){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*.80;}
      else if (diff==6){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*.90;}
      else if (diff==7){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*1.00;}
      else if (diff==8){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*1.10;}
      else if (diff==9){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*1.20;}
      else if (diff==10){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*1.40;}
      else if (diff>=11){gain = ((next_lvl*mp_gradent[who][lvl_bracket]/10)-((next_lvl-1)*mp_gradent[who][lvl_bracket]/10))*1.60;}
  }
  return gain;
}
